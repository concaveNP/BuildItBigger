apply plugin: 'com.android.application'

// Load keystore from a properties file in the root of the project directory
def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        signingConfig signingConfigs.config
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {

            // OMG.  I don't even want to begin to explain how long it took to figure out that
            // enabling this minify flag causes the endpoint to return nothing.  I'm guessing that
            // a JSON parsing routine down under gets blasted away.  Or something close to that.
            minifyEnabled false

            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
        paid {
            applicationId "com.udacity.gradle.builditbigger.paid"
        }
        free {
            applicationId "com.udacity.gradle.builditbigger.free"
        }
    }
    dexOptions {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.3.0'
    // Google backend (Google Endpoints)
    compile project(path: ':backend', configuration: 'android-endpoints')
    // Added as a Android library dependency (Android Activity to display the Joke)
    compile project(':androidlib')
    // Added for AdMob
    freeCompile 'com.google.android.gms:play-services:9.0.2'
}

/**
 * Starts the Dev App server that simulates the Google Endpoints.
 *
 * command - the shell command to execute
 * ready - the string to search for in order to determine if the server is up and running
 * directory - the location where the shell command should be run from
 */
task startServer(type: ExecWait) {
    command './gradlew appengineRun'
    ready 'Dev App Server is now running'
    directory System.getProperty("user.dir")
}

/**
 * Class that extends a task in order to specifically run a specified shell command and then
 * waits for a specified string in order for the task to be complete.
 */
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)

        File loc = new File(directory);
        println("Location is: " + loc.getAbsolutePath());
        builder.directory(loc);
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new
                InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

/**
 * Gets the PID of the process that is holding the specified port number and kills it.
 */
void freeAllPorts() {
    // The "Gradle App Engine plugin"  defaults to port 8080 (can be set via the httpPort property
    // as specified in the reference note for the runConnectedTests below
    def ports = [8080]

    ports.each { port ->
        def cmd = "lsof -Fp -i :$port"
        def process = cmd.execute()
        process.in.eachLine { line ->
            def killProcess = "kill -9 ${line.substring(1)}".execute()
            killProcess.waitFor()
            println "Dev App Engine Server has been stopped."
        }
    }
}

/**
 * Stops the dev app engine server
 */
task stopServer << {
    freeAllPorts()
}

/**
 * Simple executable task that will perform the connected tests of our app.  The purpose is to run
 * the connected tests that will requiring a RESTful endpoint server running.  This task will first
 * start up the server before running any test and upon completion will shut the server down.
 *
 * Reference:
 *
 * - Gradle Madness â€“ ExecWait: A task that waits for command line calls to be ready,
 * https://fbflex.wordpress.com/2013/03/14/gradle-madness-execwait-a-task-that-waits-for-commandline-calls-to-be-ready/
 */
task runConnectedTests(type: Exec) {
    workingDir System.getProperty("user.dir")
    commandLine './gradlew', 'connectedCheck'
}

/**
 * Sets up dependencies that our main task (runConnectedTests) must use in order to accomplish its goal.
 */
runConnectedTests.dependsOn startServer
runConnectedTests.doLast {
    freeAllPorts()
}

